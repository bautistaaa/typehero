// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Difficulty {
  BEGINNER
  EASY
  MEDIUM
  HARD
  EXTREME
}

enum RoleTypes {
  USER
  ADMIN
  MODERATOR
}

enum UserStatus {
  BANNED
  ACTIVE // can post, comment, vote, etc
  PENDING // must finish x number of challenges to be active
}

enum ReportStatus {
  PENDING
  CLEARED
  DISMISSED
}

enum Visibility {
  VISIBLE
  HIDDEN
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Role {
  id   String    @id @default(uuid())
  user User[]
  role RoleTypes @unique
}

model User {
  id String @id @default(uuid())

  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roles         Role[]

  status    UserStatus @default(PENDING)
  banReason String?    @db.MediumText

  accounts   Account[]
  sessions   Session[]
  challenge  Challenge[]
  vote       Vote[]
  submission Submission[]

  challengeReports          ChallengeReport[] @relation(name: "authored_challenge_reports")
  moderatedChallengeReports ChallengeReport[] @relation(name: "moderated_challenge_reports")
  commentReports            CommentReport[]   @relation(name: "authored_comment_reports")
  moderatedCommentReports   CommentReport[]   @relation(name: "moderated_comment_reports")

  bookmark        Bookmark[]
  sharedSolution  SharedSolution[]
  comment         ChallengeComment[]
  reply           ChallengeReply[]
  solutionComment SolutionComment[]
  solutionReply   SolutionReply[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  reports      Report[] @relation("reporter")
  reportsAbout Report[] @relation("reported_user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Challenge {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  difficulty       Difficulty
  name             String
  /// this is the description to describe the challenge on description panel
  description      String     @db.MediumText
  /// this is a short blue thats shown on the explore card
  shortDescription String
  /// this is the test cases + default starter code
  prompt           String     @db.MediumText
  visibility       Visibility @default(VISIBLE)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  vote           Vote[]
  submission     Submission[]
  comment        ChallengeComment[]
  report         ChallengeReport[]
  bookmark       Bookmark[]
  sharedSolution SharedSolution[]
  Report         Report[]           @relation("report_challenge")
  jimComment     Comment[]

  @@index([userId])
}

model Vote {
  id               Int             @id @default(autoincrement())
  user             User            @relation(fields: [userId], references: [id])
  userId           String
  challenge        Challenge?      @relation(fields: [challengeId], references: [id])
  challengeId      Int?
  submission       Submission?     @relation(fields: [submissionId], references: [id])
  submissionId     Int?
  sharedSolution   SharedSolution? @relation(fields: [sharedSolutionId], references: [id])
  sharedSolutionId Int?

  @@index([userId])
  @@index([challengeId])
  @@index([submissionId])
  @@index([sharedSolutionId])
}

/// This is a public solution created by a user for a challenge
model SharedSolution {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  title           String
  description     String            @db.MediumText
  vote            Vote[]
  user            User?             @relation(fields: [userId], references: [id])
  userId          String?
  challenge       Challenge?        @relation(fields: [challengeId], references: [id])
  challengeId     Int?
  solutionComment SolutionComment[]
  Comment         Comment[]

  @@index([userId])
  @@index([challengeId])
}

/// Every attempt a user makes to a challenge is stored here
model Submission {
  id           Int       @id @default(autoincrement())
  code         String    @db.MediumText
  createdAt    DateTime  @default(now())
  isSuccessful Boolean
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  challenge    Challenge @relation(fields: [challengeId], references: [id])
  challengeId  Int
  vote         Vote[]

  @@index([userId])
  @@index([challengeId])
}

model ChallengeComment {
  id            Int              @id @default(autoincrement())
  createdAt     DateTime         @default(now())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  challenge     Challenge        @relation(fields: [challengeId], references: [id])
  challengeId   Int
  text          String
  visibility    Visibility       @default(VISIBLE)
  replies       ChallengeReply[]
  CommentReport CommentReport[]

  @@index([userId])
  @@index([challengeId])
}

model ChallengeReply {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  comment   ChallengeComment @relation(fields: [commentId], references: [id])
  commentId Int
  text      String

  @@index([userId])
  @@index([commentId])
}

model SolutionComment {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id])
  userId        String
  solution      SharedSolution  @relation(fields: [solutionId], references: [id])
  solutionId    Int
  text          String
  visibility    Visibility      @default(VISIBLE)
  solutionReply SolutionReply[]
  CommentReport CommentReport[]

  @@index([userId])
  @@index([solutionId])
}

model SolutionReply {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now())
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  solution   SolutionComment @relation(fields: [solutionId], references: [id])
  solutionId Int
  text       String

  @@index([userId])
  @@index([solutionId])
}

model ChallengeReport {
  id Int @id @default(autoincrement())

  // meta information
  text   String       @db.MediumText
  status ReportStatus @default(PENDING)

  // report types
  derogatory Boolean @default(false)
  unclear    Boolean @default(false)

  // user infor
  author      User    @relation(fields: [authorId], references: [id], name: "authored_challenge_reports")
  authorId    String
  moderator   User?   @relation(fields: [moderatorId], references: [id], name: "moderated_challenge_reports")
  moderatorId String?

  // attached challenge.
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int

  // time
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([challengeId])
  @@index([moderatorId])
}

model CommentReport {
  id Int @id @default(autoincrement())

  // meta information
  text   String?      @db.MediumText
  status ReportStatus @default(PENDING)

  // report types
  threats    Boolean @default(false)
  hateSpeech Boolean @default(false)
  spam       Boolean @default(false)
  bullying   Boolean @default(false)

  // user info
  author      User    @relation(fields: [authorId], references: [id], name: "authored_comment_reports")
  authorId    String
  moderator   User?   @relation(fields: [moderatorId], references: [id], name: "moderated_comment_reports")
  moderatorId String?

  // attached comments
  challengeComment   ChallengeComment? @relation(fields: [challengeCommentId], references: [id])
  challengeCommentId Int?
  solutionComment    SolutionComment?  @relation(fields: [solutionCommendId], references: [id])
  solutionCommendId  Int?

  // time
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([moderatorId])
  @@index([authorId])
  @@index([challengeCommentId])
  @@index([solutionCommendId])
}

model Bookmark {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId Int?

  @@index([userId])
  @@index([challengeId])
}

enum ReportType {
  CHALLENGE
  USER
  COMMENT
}

enum IssueType {
  DEROGATORY
  OTHER
  UNCLEAR
}

model ReportIssue {
  id       Int       @id @default(autoincrement())
  reportId Int
  report   Report    @relation(fields: [reportId], references: [id])
  type     IssueType

  @@unique([id])
  @@index([reportId])
}

model Report {
  // Base table info
  id Int @id @default(autoincrement())

  text String @db.MediumText

  type   ReportType
  status ReportStatus
  issues ReportIssue[]

  // Reporter information
  reporterId String
  reporter   User   @relation("reporter", fields: [reporterId], references: [id])

  // reported User Info
  userId String?
  user   User?   @relation("reported_user", fields: [userId], references: [id])

  // reported Challenge Info
  challengeId Int?
  challenge   Challenge? @relation("report_challenge", fields: [challengeId], references: [id])

  commentId Int?
  comment   Comment? @relation("report_comment", fields: [commentId], references: [id])

  @@unique([id])
  @@index([commentId])
  @@index([reporterId])
  @@index([userId])
  @@index([challengeId])
}

enum CommentRoot {
  SOLUTION
  CHALLENGE
}

model Comment {
  id       Int    @id @default(autoincrement())
  text     String @db.MediumText
  parentId Int?

  rootType CommentRoot @default(CHALLENGE)

  rootChallengeId Int?
  rootChallenge   Challenge? @relation(fields: [rootChallengeId], references: [id])

  rootSolutionId Int?
  rootSolution   SharedSolution? @relation(fields: [rootSolutionId], references: [id])
  Report         Report[]        @relation("report_comment")

  @@index([rootSolutionId])
  @@index([rootChallengeId])
}
